doctype html5
html
  head
    title NodeJS & solR Transactions Display
    link(rel='stylesheet',href='/stylesheets/style2.css')
    link(rel='stylesheet', href='/stylesheets/d3.css')
    link(href="c3-0.4.10/c3.css" rel="stylesheet" type="text/css")

  body
    header
      h1 #{title}
    .container
      block selectParam  
      form(method="post",action="/go/0")     
        table(id="tableLogin")
         td Devise
         td 
          div 
           input(type="text", name="devise", id="devise")
         tr
         td Montant Min
         td 
          div
          input(type="text", name="montantMin", id="montantMin")
         tr
         td Montant Max
         td 
          div
           input(type="text", name="montantMax", id="montantMax")            
         tr
         td Date Min
         td 
          div
           input(type="date", name="dateMin", id="dateMin")
           input(type="submit", value="testPerHour" , formaction = "/testPerHourDisplay")
           input(type="submit", value="testPerDay" , formaction = "/testPerDayDisplay")
           input(type="submit", value="testPerWeek" , formaction = "/testPerWeekDisplay")
           input(type="submit", value="testPerMonth" , formaction = "/testPerMonthDisplay")
         tr
         td Date Max
         td 
          div
           input(type="date", name="dateMax", id="dateMax")
         tr
        br
        br
        input(type="submit", value="OK")
  div(id="chartTrxType")
  div(id="chartCurrency")
  div(id="chartAppType")
  div(id="chartTrxGenerated")
  div(id="chartTrxNbr")
    script(src='d3.js')
    script(src='c3-0.4.10/c3.min.js')
    script(src='/testIO.js')
    script(src='/socket.io.js')
    script.
      function formatCurrencies() {
        var trxString = '["Currencies",';
        var xString = '["x",';
        var loadString = "";
        var arrayCurrencies = "#{currencies}".split(",");
        for (i=0;i<arrayCurrencies.length;i+=2) {
          xString += '"' + arrayCurrencies[i] + '"';
          trxString += arrayCurrencies[i+1];
          if(i < arrayCurrencies.length - 2) {
            trxString += ",";
            xString += ",";
          }
        else {
          trxString += "]";
          xString += "]";
          }
        } 
        loadString = '{"columns": [' + xString + ',' + trxString + ']}';
        console.log("String :",loadString);
        return loadString;
      }

      function formatTrxType() {
        var trxString = '["Transaction Type",';
        var xString = '["x",';
        var loadString = "";
        var arrayTrxType = "#{TrxType}".split(",");
        for (i=0;i<arrayTrxType.length;i+=2) {
          xString += '"' + arrayTrxType[i] + '"';
          trxString += arrayTrxType[i+1];
          if(i < arrayTrxType.length - 2) {
            trxString += ",";
            xString += ",";
          }
        else {
          trxString += "]";
          xString += "]";
          }
        } 
        loadString = '{"columns": [' + xString + ',' + trxString + ']}';
        console.log("String :",loadString);
        return loadString;
      }

      function formatAppType() {
        var trxString = '';
        var xString = '';
        var loadString = "";
        var arrayAppType = "#{AppType}".split(",");
        for (i=0;i<arrayAppType.length;i+=2) {
          xString += '["' + arrayAppType[i] + '",' + arrayAppType[i+1] + "]";
          if(i < arrayAppType.length - 2) {
            xString += ",";
          }
        else {
          xString += "]";
          }
        } 
        loadString = '{"columns": [' + xString + '}';
        console.log("String :",loadString);
        return loadString;
      }

      var chartTrxType = c3.generate({
          bindto: '#chartTrxType',
          data: {
              x : 'x',
              columns: [
                  ['x'],
                  ['Transactions'],
              ],
              type: 'bar'
          },
          axis: {
              x: {
                  type: 'category' // this needed to load string x value
              },
              y: {
              tick: {
                format: d3.format(".2s,") 
              }
            }
          }
      });
      chartTrxType.load(JSON.parse(formatTrxType()));

      var chartCurrency = c3.generate({
          bindto: '#chartCurrency',
          data: {
              x : 'x',
              columns: [
                  ['x'],
                  ['Currencies'],
              ],
              type: 'bar'
          },
          axis: {
              x: {
                  type: 'category' // this needed to load string x value
              },
              y: {
              tick: {
                format: d3.format(".2s,") 
              }
            }
          }
      });
      chartCurrency.load(JSON.parse(formatCurrencies()));

      var chartAppType = c3.generate({
          bindto: '#chartAppType',
          data: {
            columns: [
              
            ],
            type : 'donut',
              onclick: function (d, i) { console.log("onclick", d, i); },
              onmouseover: function (d, i) { console.log("onmouseover", d, i); },
              onmouseout: function (d, i) { console.log("onmouseout", d, i); }
            },
            donut: {
            title: "Applications"
            }
        });
      chartAppType.load(JSON.parse(formatAppType()));

      
      var chart = c3.generate({
          bindto: '#chartTrxNbr',
          data: {
            columns: [
            ['Transactions', #{totalRows}]
            ],
            type: 'gauge',
            onclick: function (d, i) { console.log("onclick", d, i); },
            onmouseover: function (d, i) { console.log("onmouseover", d, i); },
            onmouseout: function (d, i) { console.log("onmouseout", d, i); }
          },
          gauge: {
            max:400000000,
            Label : "Number of Transactions"
          //        label: {
          //            format: function(value, ratio) {
          //                return value;
          //            },
          //            show: false // to turn off the min/max labels.
          //        },
          //    min: 0, // 0 is default, //can handle negative min e.g. vacuum / voltage / current flow / rate of change
          //    max: 100, // 100 is default
          //    units: ' %',
          //    width: 39 // for adjusting arc thickness
          },
          color: {
          pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
          threshold: {
          //            unit: 'value', // percentage is default
          //            max: 200, // 100 is default
          values: [#{totalRows}]
          }
          },
          size: {
          height: 180
          }
      });

      var chartGeneratedTrx = c3.generate({
          bindto: '#chartTrxGenerated',
          data: {
            columns: [
            ['Transactions', 0]
            ],
            type: 'gauge',
            onclick: function (d, i) { console.log("onclick", d, i); },
            onmouseover: function (d, i) { console.log("onmouseover", d, i); },
            onmouseout: function (d, i) { console.log("onmouseout", d, i); }
          },
          gauge: {
            max:10000000,
            Label : "Generated Transactions"
          },
          color: {
          pattern: ['#FF0000', '#F97600', '#F6C600', '#60B044'], // the three color levels for the percentage values.
          threshold: {
          values: [0]
          }
          },
          size: {
          height: 180
          }
      });



