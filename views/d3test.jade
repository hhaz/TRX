head 
	link(rel='stylesheet', href='/stylesheets/d3.css')
	body
		script(src='d3.js')
		script.
			function formatCurrencies() {
				var jsonString = "[";
				var arrayCurrencies = "#{currencies}".split(",");
				for (i=0;i<arrayCurrencies.length;i+=2) {
					jsonString += '{"currency": "' + arrayCurrencies[i] + '","value":' + arrayCurrencies[i+1] + "}";
					if(i < arrayCurrencies.length - 2) {
						jsonString += ",";
					}
				else {
					jsonString += "]";
					}
				}	
				console.log("jsonString :",jsonString);
				return jsonString;
			}

			function draw2(data) {
				var margin = {top: 20, right: 20, bottom: 30, left: 40},
					width = 200 - margin.left - margin.right,
					height = 100 - margin.top - margin.bottom;

				var x = d3.scale.ordinal()
					.rangeRoundBands([0, width], .1);

				var y = d3.scale.linear()
					.range([height, 0]);

				var xAxis = d3.svg.axis()
					.scale(x)
					.orient("bottom");

				var yAxis = d3.svg.axis()
					.scale(y)
					.orient("left")
					.ticks(4);

				var svg = d3.select("body").append("svg")
					.attr("width", width + margin.left + margin.right)
					.attr("height", height + margin.top + margin.bottom)
					.append("g")
					.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

				x.domain(data.map(function(d) { return d.currency; }));
				y.domain([0, d3.max(data, function(d) { return d.value; })]);

				svg.append("g")
					.attr("class", "x axis")
					.attr("transform", "translate(0," + height + ")")
					.call(xAxis);

				svg.append("g")
					.attr("class", "y axis")
					.call(yAxis)
					.append("text")
					.attr("transform", "rotate(-90)")
					.attr("y", 3)
					.attr("dy", ".71em")
					.style("text-anchor", "end")
					.text("# Transactions");

				svg.selectAll(".bar")
					.data(data)
					.enter().append("rect")
					.attr("class", "bar")
					.attr("x", function(d) { return x(d.currency); })
					.attr("width", x.rangeBand())
					.attr("y", function(d) { return y(d.value); })
					.attr("height", function(d) { return height - y(d.value); });
			}

			function type(d) {
			d.value = +d.value;
			return d;
			}

			function draw(dataset) {
				console.log("dataset :",dataset);
				//Largeur et hauteur du graphe
				var larg = 100;
				var haut = 100;
				var barPadding = 2; //Padding des barres
				var nbb = dataset.length; //Nb de barres
				var lb = ((larg - nbb) / nbb); //Largeur barre
				var ch = (haut / d3.max(dataset, function (d) {
													return d.value //Coef. hauteur.
												}));

				//Create SVG element
				var svg = d3.select("body")
					.append("svg")
					.attr("width", larg)
					.attr("height", haut);


				svg.selectAll("rect")
					.data(dataset)
					.enter()
					.append("rect")
					.attr("x", function(d, i) {
						return ((i) * lb);
					})
					.attr("y", function(d) {
						return haut - (d.value * ch);
					})
					.attr("width", lb - barPadding)
					.attr("height", function(d) {
						return (d.value * ch);
					})
					.attr("fill", function(d) {
						return "rgb(0, 0, " + (d.value * 10) + ")";
					})
					.append("title")
					.text(function(d) {
					return d.value;
					});
				
				svg.selectAll("text")
					.data(dataset)
					.enter()
					.append("text")
					.text(function(d) {
						return d.value;
					})
					.attr("x", function(d, i) {
						return ((i) * lb) + 6;
					})
					.attr("y", function(d) {
						return haut - ((d.value * ch)/2);
					})
					.attr("font-family", "sans-serif")
					.attr("font-size", "6px")
					.attr("fill", "white");
			}
			
			//d3.json('data.json', draw);
			draw2(JSON.parse(formatCurrencies()));
			

